var aliasMap = {};
var pathMap = {};
module.exports.map = function(app, configFile, routePath) {
  var controllers_init;
  var controllers;
  var routeDir = '../../../routes/';
  var config = require(routeDir + configFile);
  // Register all routes with appopreate callback
  for(var i = 0; i < config.length; i++) {
    var map = config[i];
    // Register each resource to a route
    if(map.resource) { // Unnested resource: users, session...
      var resource = map.resource;
      if(resource.indexOf('#') == -1) {
        var routeFileName = resource;

        controllers = require(routePath ? routeDir + routePath + '/' + routeFileName : routeDir + routeFileName);

        // Register index action: list all resource
        if(controllers['index']) {
          var action = controllers['index'];
          var filters = action.filters;
          if(filters) {
            if(typeof filters == 'function') { // one filter
              app.get('/' + resource, filters, action.callback);
            } else {
              filters.push(action.callback);
              filters.unshift('/' + resource);
              app.get.apply(app, filters);
              // Remember to append 'scope' before 'filters'
              action.filters = filters.slice(1, filters.length - 1);
            }
          } else { // No filterss
            app.get('/' + resource, action.callback);
          }
          pathMap['/' + resource] ? 
            pathMap['/' + resource].push({
              method: 'GET',
              name: 'list_' + resource
            }) : pathMap['/' + resource] = [{
              method: 'GET',
              name: 'list_' + resource
            }];
        }

        // Register show action: display resource information
        if(controllers['show']) {
          var action = controllers['show']
          if(action.param) {
            var filters = action.filters
            if(filters) { // apply filter(s)
              if(typeof filters == 'function') {
                app.get('/' + resource + '/' + action.param, filters, action.callback);
              } else {
                filters.push(action.callback);
                filters.unshift('/' + resource + '/' + action.param);
                app.get.apply(app, filters);
                // Remember to append 'scope' before 'filters'
                action.filters = filters.slice(1, filters.length - 1);
              }
            } else { // No filters
              app.get('/' + resource + '/' + action.param, action.callback);
            }
          } else {
            throw new Error("Required params were not found when registering 'show' " + resource + " route");
          }
          pathMap['/' + resource + '/' + action.param] ? 
            pathMap['/' + resource + '/' + action.param].push({
              method: 'GET', 
              name: 'show_' + resource
            }) : pathMap['/' + resource + '/' + action.param] = [{
              method: 'GET', 
              name: 'show_' + resource
            }];
        }


        // Register show action: display resource information
        if(controllers['new']) {
          var action = controllers['new'],
            filters = action.filters;

          if(filters) { // apply filter(s)
            if(typeof filters == 'function') {
              app.get('/' + resource + '/new', filters, action.callback);
            } else {
              filters.push(action.callback);
              filters.unshift('/' + resource + '/new');
              app.get.apply(app, filters);
              // Remember to append 'scope' before 'filters'
              action.filters = filters.slice(1, filters.length - 1);
            }
          } else { // No filters
            app.get('/' + resource + '/new', action.callback);
          }
          pathMap['/' + resource + '/new'] ? 
            pathMap['/' + resource + '/new'].push({
              method: 'GET', name: 'new_' + resource
            }) : pathMap['/' + resource + '/new'] = [{
              method: 'GET', name: 'new_' + resource
            }];
        }


        // Register edit action: display editting resource page
        if(controllers['edit']) {
          var action = controllers['edit']
          if(action.param) {
            var filters = action.filters
            if(filters) { // apply filter(s)
              if(typeof filters == 'function') {
                app.get('/' + resource + '/' + action.param + '/edit', filters, action.callback);
              } else {
                filters.push(action.callback);
                filters.unshift('/' + resource + '/' + action.param + '/edit');
                app.get.apply(app, filters);
                // Remember to append 'scope' before 'filters'
                action.filters = filters.slice(1, filters.length - 1);
              }
            } else { // No filters
              app.get('/' + resource + '/' + action.param + '/edit', action.callback);
            }
          } else {
            throw new Error("Required params were not found when registering 'edit' " + resource + " route");
          }
          pathMap['/' + resource + '/' + action.param + '/edit'] ? 
            pathMap['/' + resource + '/' + action.param + '/edit'].push({
              method: 'GET',
              name: 'edit_' + resource
            }) : pathMap['/' + resource + '/' + action.param + '/edit'] = [{
              method: 'GET',
              name: 'edit_' + resource
            }];
        }


        // Register show action: display resource information
        if(controllers['create']) {
          var action = controllers['create'],
            filters = action.filters
          if(filters) { // apply filter(s)
            if(typeof filters == 'function') {
              app.post('/' + resource, filters, action.callback);
            } else {
              filters.push(action.callback);
              filters.unshift('/' + resource);
              app.post.apply(app, filters);
              // Remember to append 'scope' before 'filters'
              action.filters = filters.slice(1, filters.length - 1);
            }
          } else { // No filters
            app.post('/' + resource, action.callback);
          }
          pathMap['/' + resource] ? 
            pathMap['/' + resource].push({
              method: 'POST',
              name: 'create_' + resource
            }) : pathMap['/' + resource] = [{
              method: 'POST',
              name: 'create_' + resource
            }];
        }

        // Register show action: display resource information
        if(controllers['update']) {
          var action = controllers['update']
          if(action.param) {
            var filters = action.filters
            if(filters) { // apply filter(s)
              if(typeof filters == 'function') {
                app.put('/' + resource + '/' + action.param, filters, action.callback);
              } else {
                filters.push(action.callback);
                filters.unshift('/' + resource + '/' + action.param);
                app.put.apply(app, filters);
                // Remember to append 'scope' before 'filters'
                action.filters = filters.slice(1, filters.length - 1);
              }
            } else { // No filters
              app.put('/' + resource + '/' + action.param, action.callback);
            }
          } else {
            throw new Error("Required params were not found when registering 'update' " + resource + ' route');
          }
          pathMap['/' + resource + '/' + action.param] ? 
            pathMap['/' + resource + '/' + action.param].push({
              method: 'PUT',
              name: 'update_' + resource
            }) : pathMap['/' + resource + '/' + action.param] = [{
              method: 'PUT',
              name: 'update_' + resource
            }];
        }

        // Register show action: display resource information
        if(controllers['delete']) {
          var action = controllers['delete']
          if(action.param) {
            var filters = action.filters
            if(filters) { // apply filter(s)
              if(typeof filters == 'function') {
                app.delete('/' + resource + '/' + action.param, filters, action.callback);
              } else {
                filters.push(action.callback);
                filters.unshift('/' + resource + '/' + action.param);
                app.delete.apply(app, filters);
                // Remember to append 'scope' before 'filters'
                action.filters = filters.slice(1, filters.length - 1);
              }
            } else { // No filters
              app.delete('/' + resource + '/' + action.param, action.callback);
            }
          } else {
            throw new Error ("Required params were not found when registering 'delete' " + resource + ' route');
          }
          pathMap['/' + resource + '/' + action.param] ? 
          pathMap['/' + resource + '/' + action.param].push({
            method: 'DELETE',
            name: 'delete_' + resource
          }) : pathMap['/' + resource + '/' + action.param] = [{
            method: 'DELETE',
            name: 'delete_' + resource
          }];
        }

        // Create aliasMap
        // List all resources
        aliasMap['list_' + resource] =  (function(resource) {
          return function() {
            return '/' + resource;
          }
        })(resource);
        // Display specific resource
        aliasMap['new_' + resource] = (function(resource) {
          return function(id) {
            return '/' + resource + '/new';
          }
        })(resource);
        // Display specific resource
        aliasMap['show_' + resource] = (function(resource) {
          return function(id) {
            return '/' + resource + '/' + id;
          }
        })(resource);
        // Display specific resource
        aliasMap['edit_' + resource] = (function(resource) {
          return function(id) {
            return '/' + resource + '/' + id + '/edit';
          }
        })(resource);
      } else { // Nested resources

      }

    } else{ // Named route via HTTP verbs
      for(var key in map) {
        if(key == 'to') {
          var to = map[key];
        } else if(key == 'as') {
          var alias = map[key];
        } else {
          var method = key;
          var path = map[key];
        }
      }

      // Step 1: register route with method and action above
      // - Load controller:
      var routeFileName = to.substr(0, to.indexOf('#'));
      var action = to.substr(to.indexOf('#') + 1, to.length); // list, new..
      
      controllers = require(routeDir + routeFileName);


      if(controllers[action]) {
        var actionDef = controllers[action],
          filters = actionDef.filters;

        if(filters) { // apply filter(s)
          if(typeof filters == 'function') {
            app[method](path, filters, actionDef.callback);
          } else {
            filters.push(actionDef.callback);
            filters.unshift(path);
            app[method].apply(app, filters);
            // Remember to append 'scope' before 'filters'
            actionDef.filters = filters.slice(1, filters.length - 1);
          }
        } else {
          app[method](path, actionDef.callback);
        }
      } else {
        throw new Error("No action was found when registering path " + path);
      }
      pathMap[path] ? 
        pathMap[path].push({
          method: method.toUpperCase(),
          name: alias
        }) : pathMap[path] = [{
          method: method.toUpperCase(),
          name: alias
        }];
      // Step 2: create alias
      var listParams = path.match(/:([a-zA-Z_0-9])*/g);
      if(listParams) {
        if(listParams.length > 1) {
          aliasMap[alias] = (function(key, path) {
            return function(paramObj) {
              for(var key in paramObj) {
                path = path.replace(':' + key, paramObj[key]);
              }
              return path;
            }
          })(key, path)
        } else {
          aliasMap[alias] = function(path, listParams) {
            return function(paramStr) {
              return path.replace(listParams[0], paramStr);
            }
          }(path, listParams)
        }
      } else {
        aliasMap[alias] = (function(path) {
          return function() {
            return path;
          }
        })(path);
      }


    }
  }
}

module.exports.get = function(alias, param) {
  if(param) {
    return aliasMap[alias]? aliasMap[alias](param) : undefined;
  } else {
    return aliasMap[alias]? aliasMap[alias]() : undefined;
  }
}

module.exports.alias = function(route, method) {
  if(pathMap[route]) {
    for(var i = 0; i < pathMap[route].length; i++) {
      if(method) {
        if(pathMap[route][i].method == method.toUpperCase()) {
          return pathMap[route][i].name;
        }
      } else {
        console.log("Missing method params");
        return undefined;
      }
    }
  } else {
    // If route is not registered via module return undefined
    return undefined;
  }
}